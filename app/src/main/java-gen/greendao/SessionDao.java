package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Session;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SESSION.
*/
public class SessionDao extends AbstractDao<Session, Long> {

    public static final String TABLENAME = "SESSION";

    /**
     * Properties of entity Session.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AccessToken = new Property(1, String.class, "accessToken", false, "ACCESS_TOKEN");
        public final static Property TokenType = new Property(2, String.class, "tokenType", false, "TOKEN_TYPE");
        public final static Property ExpiresIn = new Property(3, Long.class, "expiresIn", false, "EXPIRES_IN");
    };


    public SessionDao(DaoConfig config) {
        super(config);
    }
    
    public SessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SESSION' (" + //
                "'_id' INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "'ACCESS_TOKEN' TEXT," + // 1: accessToken
                "'TOKEN_TYPE' TEXT," + // 2: tokenType
                "'EXPIRES_IN' INTEGER);"); // 3: expiresIn
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SESSION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Session entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(2, accessToken);
        }
 
        String tokenType = entity.getTokenType();
        if (tokenType != null) {
            stmt.bindString(3, tokenType);
        }
 
        Long expiresIn = entity.getExpiresIn();
        if (expiresIn != null) {
            stmt.bindLong(4, expiresIn);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Session readEntity(Cursor cursor, int offset) {
        Session entity = new Session( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accessToken
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tokenType
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // expiresIn
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Session entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccessToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTokenType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExpiresIn(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Session entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Session entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
