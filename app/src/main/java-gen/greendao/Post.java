package greendao;

import com.google.gson.annotations.SerializedName;

import java.util.List;
import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "POST".
 */
public class Post {

    // KEEP FIELDS - put your custom fields here

    private Long id;
    private Long userIdFK;
    private Long thumbnailIdFK;
    @SerializedName("category_id")
    private Long categoryIdFK;
    @SerializedName("day")
    private String date;
    private String name;
    private String tagline;
    @SerializedName("votes_count")
    private Long votesCount;
    @SerializedName("redirect_url")
    private String redirectUrl;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PostDao myDao;

    private User user;
    private Long user__resolvedKey;

    private Thumbnail thumbnail;
    private Long thumbnail__resolvedKey;

    @SerializedName("screenshot_url")
    private Screenshot screenshot;
    private Long screenshot__resolvedKey;

    private List<User> makers;
    // KEEP FIELDS END

    public Post() {
    }

    public Post(Long id) {
        this.id = id;
    }

    public Post(Long id, Long userIdFK, Long thumbnailIdFK, Long categoryIdFK, String date, String name, String tagline, Long votesCount, String redirectUrl) {
        this.id = id;
        this.userIdFK = userIdFK;
        this.thumbnailIdFK = thumbnailIdFK;
        this.categoryIdFK = categoryIdFK;
        this.date = date;
        this.name = name;
        this.tagline = tagline;
        this.votesCount = votesCount;
        this.redirectUrl = redirectUrl;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPostDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getUserIdFK() {
        return userIdFK;
    }

    public void setUserIdFK(Long userIdFK) {
        this.userIdFK = userIdFK;
    }

    public Long getThumbnailIdFK() {
        return thumbnailIdFK;
    }

    public void setThumbnailIdFK(Long thumbnailIdFK) {
        this.thumbnailIdFK = thumbnailIdFK;
    }

    public Long getCategoryIdFK() {
        return categoryIdFK;
    }

    public void setCategoryIdFK(Long categoryIdFK) {
        this.categoryIdFK = categoryIdFK;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getTagline() {
        return tagline;
    }

    public void setTagline(String tagline) {
        this.tagline = tagline;
    }

    public Long getVotesCount() {
        return votesCount;
    }

    public void setVotesCount(Long votesCount) {
        this.votesCount = votesCount;
    }

    public String getRedirectUrl() {
        return redirectUrl;
    }

    public void setRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.userIdFK;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            userIdFK = user == null ? null : user.getId();
            user__resolvedKey = userIdFK;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Thumbnail getThumbnail() {
        Long __key = this.thumbnailIdFK;
        if (thumbnail__resolvedKey == null || !thumbnail__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ThumbnailDao targetDao = daoSession.getThumbnailDao();
            Thumbnail thumbnailNew = targetDao.load(__key);
            synchronized (this) {
                thumbnail = thumbnailNew;
            	thumbnail__resolvedKey = __key;
            }
        }
        return thumbnail;
    }

    public void setThumbnail(Thumbnail thumbnail) {
        synchronized (this) {
            this.thumbnail = thumbnail;
            thumbnailIdFK = thumbnail == null ? null : thumbnail.getId();
            thumbnail__resolvedKey = thumbnailIdFK;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Screenshot getScreenshot() {
        Long __key = this.id;
        if (screenshot__resolvedKey == null || !screenshot__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ScreenshotDao targetDao = daoSession.getScreenshotDao();
            Screenshot screenshotNew = targetDao.load(__key);
            synchronized (this) {
                screenshot = screenshotNew;
            	screenshot__resolvedKey = __key;
            }
        }
        return screenshot;
    }

    public void setScreenshot(Screenshot screenshot) {
        synchronized (this) {
            this.screenshot = screenshot;
            id = screenshot == null ? null : screenshot.getId();
            screenshot__resolvedKey = id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<User> getMakers() {
        if (makers == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            List<User> makersNew = targetDao._queryPost_Makers(id);
            synchronized (this) {
                if(makers == null) {
                    makers = makersNew;
                }
            }
        }
        return makers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMakers() {
        makers = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public void sync() {
        setUser(user);
        setThumbnail(thumbnail);
        screenshot.setId(id);
        setScreenshot(screenshot);

        getUser().sync();
    }
    // KEEP METHODS END

}
