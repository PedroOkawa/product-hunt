package greendao;

import com.google.gson.annotations.SerializedName;

import java.util.List;
import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "POST".
 */
public class Post {


    // KEEP FIELDS - put your custom fields here

    @SerializedName("id")
    private Long postId;
    @SerializedName("day")
    private String date;
    private String name;
//    private String image;
    private String tagline;
    @SerializedName("votes_count")
    private Long votesCount;
    @SerializedName("redirect_url")
    private String redirectUrl;
//    private String screenshotSmall;
//    private String screenshotBig;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PostDao myDao;

    private User user;
    private boolean user__refreshed;

    private List<User> makers;

    // KEEP FIELDS END

    public Post() {
    }

    public Post(Long postId) {
        this.postId = postId;
    }

    public Post(Long postId, String date, String name, String tagline, Long votesCount, String redirectUrl) {
        this.postId = postId;
        this.date = date;
        this.name = name;
        this.tagline = tagline;
        this.votesCount = votesCount;
        this.redirectUrl = redirectUrl;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPostDao() : null;
    }

    public Long getPostId() {
        return postId;
    }

    public void setPostId(Long postId) {
        this.postId = postId;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getTagline() {
        return tagline;
    }

    public void setTagline(String tagline) {
        this.tagline = tagline;
    }

    public Long getVotesCount() {
        return votesCount;
    }

    public void setVotesCount(Long votesCount) {
        this.votesCount = votesCount;
    }

    public String getRedirectUrl() {
        return redirectUrl;
    }

    public void setRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        if (user != null || !user__refreshed) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            targetDao.refresh(user);
            user__refreshed = true;
        }
        return user;
    }

    /** To-one relationship, returned entity is not refreshed and may carry only the PK property. */
    public User peakUser() {
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            user__refreshed = true;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<User> getMakers() {
        if (makers == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            List<User> makersNew = targetDao._queryPost_Makers(postId);
            synchronized (this) {
                if(makers == null) {
                    makers = makersNew;
                }
            }
        }
        return makers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMakers() {
        makers = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
